

NeedsTimingInfo = true;

var ARTICULATION_TYPES = [
	"Sustain",
	"Power Sustain",
	"Mute",
	"Power Mute",
	"Staccato",
	"Power Staccato",
	"Tremolo",
	"Pinch",
	"Harmonic",
	"Hammer/Pull",
	"Portamento",
	"FX",
	"Tapping"
];

var KEYSWITCH_NOTES = [
	"C-2",
	"C#-2",
	"D-2",
	"D#-2",
	"E-2",
	"F-2",
	"F#-2",
	"G-2",
	"G#-2",
	"A-2",
	"A#-2",
	"B-2",
	"C-1", // 12
	"C#-1",
	"D-1",
	"D#-1",
	"E-1",
	"F-1",
	"F#-1",
	"G-1",
	"G#-1",
	"A-1",
	"A#-1",
	"B-1",
	"C-0"
];


var PluginParameters = [
{name:"---- Articulation selection ----", type:"text"},
{name:"Articulation",   type:"menu", valueStrings:ARTICULATION_TYPES,defaultValue: 0, numberOfSteps:ARTICULATION_TYPES.length-1},
{name:"---- Keyswitch configuration ----", type:"text"},
{name:"Sustain",        type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 12, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"Power Sustain",  type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 13, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"Mute",           type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 14, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"Power Mute",     type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 15, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"Staccato",       type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 16, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"Power Staccato", type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 17, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"Tremolo",        type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 18, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"Pinch",          type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 19, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"Harmonic",       type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 20, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"Hammer/Pull",    type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 21, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"Portamento",     type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 22, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"FX",             type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 23, numberOfSteps: KEYSWITCH_NOTES.length-1},
{name:"Tapping",        type:"menu", valueStrings:KEYSWITCH_NOTES, defaultValue: 9, numberOfSteps: KEYSWITCH_NOTES.length-1}
];

var articulation;
var prev_art;
var keyswitch_active = false;
                        
function HandleMIDI(event) 
{
	if (event instanceof NoteOn) 
	{
		CheckArticulation();
	}
	else if(event instanceof NoteOff)
	{
	}
	else Trace(event);
	event.send();
}

function ProcessMIDI() // called once per process block
{
	var info = GetTimingInfo();
	if(!info.playing && keyswitch_active)
	{
		DeactivateKeySwitch(prev_art);
	}
}

function CheckArticulation()
{
	articulation = GetParameter("Articulation");
	if(articulation != prev_art)
	{
		if(keyswitch_active)
		{
			DeactivateKeySwitch(prev_art);
		}
		ActivateKeySwitch(articulation);
	}
}

function ActivateKeySwitch(art)
{
	if(art < 0)
	{
		Trace("ActivateKeySwitch invalid parameter " + art);
		return;
	}
	Trace("ActivateKeySwitch " + ARTICULATION_TYPES[art]);
	var ks = new NoteOn;
	ks.pitch = GetKeySwitchNote(art);
	ks.send();
	prev_art = articulation;
	keyswitch_active = true;
}

function DeactivateKeySwitch(art)
{
	if(art < 0)
	{
		Trace("DectivateKeySwitch invalid parameter " + art);
		return;
	}
	Trace("DeactivateKeySwitch " + ARTICULATION_TYPES[art]);
	var ks = new NoteOff;
	ks.pitch = GetKeySwitchNote(art);
	ks.send();
	keyswitch_active = false;
	prev_art = -1;
}

function GetKeySwitchNote(art)
{
	if(art < 0)
	{
		Trace("GetKeySwitchNote invalid parameter " + art);
		return;
	}
	var art_ks_type = GetParameter(ARTICULATION_TYPES[art]);
	var keyswitch = KEYSWITCH_NOTES[art_ks_type];
	return MIDI.noteNumber(keyswitch);
}